<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Obsidian-Publish]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>site-lib/media/favicon.png</url><title>Obsidian-Publish</title><link></link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Thu, 06 Mar 2025 11:10:42 GMT</lastBuildDate><atom:link href="site-lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Thu, 06 Mar 2025 11:10:37 GMT</pubDate><ttl>60</ttl><dc:creator></dc:creator><item><title><![CDATA[code test]]></title><description><![CDATA[주제설명
USkeletalMeshComponent* FPSMesh;
코드설명
...
UCLASS() class BAKUEATSNIGHTMARES_API AFPSCharacter : public ACharacter
{ ... public: // Called every frame virtual void Tick(float DeltaTime) override; // Called to bind functionality to input virtual void SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent) override; ... // 일인칭 메시(팔), self player에게만 보임 UPROPERTY(VisibleDefaultsOnly, Category = Mesh) USkeletalMeshComponent* FPSMesh;
};
FPSMesh = CreateDefaultSubobject&lt;USkeletalMeshComponent&gt;(TEXT("FirstPersonMesh"));
check(FPSMesh != nullptr); <a href=".?query=tag:CreateDefaultSubobject" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#CreateDefaultSubobject">#CreateDefaultSubobject</a> 로 현재 클래스에 <a href=".?query=tag:USkeletalMeshComponent" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#USkeletalMeshComponent">#USkeletalMeshComponent</a> 소유권을 부여하여 FPSMesh 변수를 통해 스켈레탈 메시를 관리할 수 있도록 한다. 그 뒤 <a href=".?query=tag:check" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#check">#check</a> 를 통해 생성 유무를 확인한다.<br>
_<a data-href="3. 캐릭터 카메라 설정" href=".html" class="internal-link" target="_self" rel="noopener nofollow">3. 캐릭터 카메라 설정</a> 참고
FPSMesh-&gt;SetupAttachment(FPSCameraComponent);
<br>위는 FPSCameraComponent에 FPSMesh를 부착하는 코드이다. <a href=".?query=tag:UCameraComponent" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#UCameraComponent">#UCameraComponent</a> 와 <a href=".?query=tag:USkeletalMeshComponent" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#USkeletalMeshComponent">#USkeletalMeshComponent</a> 전부 <a href=".?query=tag:USceneComponet" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#USceneComponet">#USceneComponet</a> 를 상속받기 때문에 타입이 일치하여 캐스팅이 필요하지 않는다. )
~~FPSMesh-&gt;bCastDynamicShadow = false;~~
FPSMesh-&gt;CastShadow = false;
<br><a href=".?query=tag:bCastDynamicShadow" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#bCastDynamicShadow">#bCastDynamicShadow</a> 는 동적 그림자의 활성화를 설정할 수 있다. false 로 비활성화 해주어 실시간으로(동적으로) FPSMesh의 그림자가 생성되지 않는다.<br><a href=".?query=tag:CashShadow" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#CashShadow">#CashShadow</a> 는 모든 그림자의 활성화를 설정할 수 있다. false로 비활성화 해주어 FPSMesh의 어떠한 그림자도 생성되지 않도록 해준다.
FPSMesh-&gt;SetOnlyOwnerSee(true);
<br><a href=".?query=tag:SetOnlyOwnerSee" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#SetOnlyOwnerSee">#SetOnlyOwnerSee</a> 는 해당 메시 소유자에게만 보아도록 설정하는 함수이다. 다른 플레이어는 이 메시를 볼 수 없다.
Default값은 false로 모든 플레이어가 해당 메시를 볼 수 있다.
GetMesh()-&gt;SetOwnerNoSee(true);
<br><a href=".?query=tag:GetMesh" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#GetMesh">#GetMesh</a> 를 통해 현재 캐릭터의 메시(몸 전체, 자기자신)를 가져온다. 그 뒤 <a href=".?query=tag:SetOwnerNoSee" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#SetOwnerNoSee">#SetOwnerNoSee</a> 함수로 해당 메시를 플레이어에게 보이지 않도록 설정한다. 그럼 플레이어는 카메라에 붙어있는 팔 메시만 보이게 된다.
#include "FPSCharacter.h" AFPSCharacter::AFPSCharacter()
{ ... // self Player의 일인칭 메시 컴포넌트 생성 FPSMesh = CreateDefaultSubobject&lt;USkeletalMeshComponent&gt;(TEXT("FirstPersonMesh")); check(FPSMesh != nullptr); // FPS 메시를 FPS 카메라에 붙임 FPSMesh-&gt;SetupAttachment(FPSCameraComponent); // 일부 섀도를 비활성화 하여 단일 메시 느낌 줌 ~~FPSMesh-&gt;bCastDynamicShadow = false;~~ FPSMesh-&gt;CastShadow = false;
} // Called when the game starts or when spawned
void AFPSCharacter::BeginPlay()
{ ... // self Player만 이 메시를 볼수 있도록 설정 FPSMesh-&gt;SetOnlyOwnerSee(true); // self Player에게 본체가 되는 기본 메시가 보이지 않도록 설정 GetMesh()-&gt;SetOwnerNoSee(true);
} ]]></description><link>code-test.html</link><guid isPermaLink="false">code test.md</guid><pubDate>Thu, 06 Mar 2025 11:08:04 GMT</pubDate></item></channel></rss>